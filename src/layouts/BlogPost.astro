---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate";
import BaseLayout from "@/layouts/BaseLayout";
import Tag from "@/components/Tag";
import type { MarkdownHeading } from "astro";
import { Image } from "astro:assets";

type Props = {
  id: CollectionEntry<"blog">["id"];
  data: CollectionEntry<"blog">["data"];
  headings: MarkdownHeading[];
  readTime: string;
};

const { data, readTime, headings, id } = Astro.props;
const { title, description, pubDate, heroImage, tags } = data;

const articleDate = pubDate.toISOString();
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage}
  articleDate={articleDate}
>
  <article class="min-w-full sm:max-w-none md:max-w-none md:py-4">
    <header class="mb-3 flex flex-col items-center justify-center gap-6">
      <div class="flex flex-col gap-2">
        <p class="text-center text-sm">
          Published <FormattedDate date={pubDate} /> - {readTime}
        </p>
        <h1
          class="text-center text-2xl font-semibold sm:text-4xl md:pb-2.5 md:text-6xl"
        >
          {title}
        </h1>
      </div>

      <div
        class="flex flex-wrap items-center justify-center gap-2 gap-y-4 md:gap-5"
      >
        {tags.map((tag) => <Tag tag={tag} />)}
      </div>
    </header>

    <>
      {
        heroImage && (
          <Image
            src={heroImage}
            width={1280}
            height={500}
            format="avif"
            loading="eager"
            class="my-8 max-h-[300px] w-full rounded-md object-cover md:max-h-[500px]"
            alt={`Banner hero image of ${title}`}
          />
        )
      }
    </>

    <hr />

    <div class="blog-body">
      <slot />
    </div>
  </article>
</BaseLayout>

<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) {
          index?.classList.remove("bg-teal-800", "dark:bg-teal-800"); // remove bg
          index?.classList.add(
            "bg-cyan-600",
            "dark:bg-cyan-900",
            "font-bold",
            "transition-colors",
            "duration-200",
          );
        } else {
          index?.classList.add("bg-teal-800", "dark:bg-teal-800"); // add bg
          index?.classList.remove(
            "bg-cyan-600",
            "dark:bg-cyan-900",
            "font-bold",
            "transition-colors",
            "duration-200",
          );
        }
      });
    }

    const headings = document.querySelectorAll(
      "div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
    );

    const options = {
      root: null,
      rootMargin: " 15% 0px 0% 0px ",
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  };
  fnObserver();
  document.addEventListener("astro:after-swap", fnObserver);
</script>
