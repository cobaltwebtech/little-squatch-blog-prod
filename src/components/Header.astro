---
import ToggleTheme from "./ToggleTheme.astro";
import Logo from "./icons/Logo.astro";
import { Icon } from "astro-icon/components";
import type { NavItem } from "../utils/types";

//Array for menu items with Astro Icons
const navItems: Array<NavItem> = [
  {
    title: "Blog",
    url: "/blog",
    iconName: "solar:notebook-bookmark-bold-duotone",
  },
  { title: "Gallery", url: "/gallery", iconName: "solar:gallery-bold-duotone" },
  { title: "Tags", url: "/tags", iconName: "solar:tag-bold-duotone" },
  {
    title: "About",
    url: "/about-little-squatch",
    iconName: "solar:info-square-bold-duotone",
  },
  {
    title: "Contact",
    url: "/contact",
    iconName: "solar:chat-line-bold-duotone",
  },
];
---

<!-- Preline scripts are imported in the BaseLayout.astro component --><!-- Main header component -->
<header
  class="sticky inset-x-0 top-4 z-50 mx-auto flex max-w-screen-2xl flex-wrap px-2 text-sm sm:px-6 lg:flex-nowrap lg:justify-start lg:px-8"
>
  <!-- Navigation container -->
  <nav
    class="relative mx-2 w-full rounded-3xl border border-cyan-400 bg-cyan-800/85 p-2 backdrop-blur-md sm:rounded-[36px] sm:px-4 sm:py-3 md:px-4 lg:flex lg:items-center lg:justify-between lg:px-6 lg:py-0 xl:mx-auto dark:border-cyan-600 dark:bg-cyan-900/85 dark:backdrop-blur-md"
    aria-label="Navigation"
  >
    <div class="flex items-center justify-between gap-4">
      <!-- Brand logo -->
      <a
        class="flex rounded-lg text-xl font-bold ring-slate-500 outline-none focus-visible:ring dark:ring-slate-200 dark:focus:outline-none"
        href="/"
        aria-label="Little Squatch Blog logo"
      >
        <div class="mx-auto w-[80px]">
          <Logo />
        </div>
        <div
          class="mx-2 flex items-center text-lg font-bold text-white sm:text-xl sm:text-nowrap lg:w-max lg:text-2xl xl:text-3xl"
        >
          Little Squatch Blog
        </div>
      </a>
      <!-- Collapse toggle for smaller screens -->
      <div class="ml-auto lg:hidden">
        <button
          type="button"
          class="hs-collapse-toggle flex size-8 items-center justify-center text-sm font-bold text-white transition duration-300 disabled:pointer-events-none disabled:opacity-50 dark:focus:outline-none"
          data-hs-collapse="#navbar-collapse-with-animation"
          aria-controls="navbar-collapse-with-animation"
          aria-label="Toggle navigation"
        >
          <Icon
            name="solar:hamburger-menu-line-duotone"
            class="hs-collapse-open:hidden size-8 shrink-0"
          />
          <Icon
            name="solar:close-circle-bold-duotone"
            class="hs-collapse-open:block hidden size-8 shrink-0"
          />
        </button>
      </div>
      <!-- ThemeIcon component specifically for smaller screens -->
      <span class="inline-block lg:hidden">
        <ToggleTheme />
      </span>
    </div>
    <!-- Contains navigation links -->
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 lg:block"
    >
      <!-- Navigation links container -->
      <div
        class="m-5 flex flex-col gap-x-0 gap-y-4 sm:mr-0 md:gap-x-4 lg:flex-row lg:items-center lg:justify-end lg:gap-x-7 lg:gap-y-0 lg:ps-5"
      >
        <!-- Menu items -->
        <ul
          class="grid grid-flow-col grid-rows-3 gap-2 lg:grid-flow-row lg:grid-cols-5 lg:grid-rows-1"
        >
          {
            navItems.map(({ title, url, iconName }) => (
              <li>
                <a
                  class="text-md flex items-center justify-start py-4 font-semibold text-nowrap lg:justify-center"
                  href={url}
                >
                  <Icon name={iconName} class="size-8 text-orange-400" />
                  <span class="ml-2 text-white">{title}</span>
                </a>
              </li>
            ))
          }
        </ul>
        <!-- ThemeIcon component specifically for larger screens -->
        <span class="hidden lg:inline-block">
          <ToggleTheme />
        </span>
      </div>
    </div>
  </nav>
</header>
<!-- Theme Appearance script to manage light/dark modes -->
<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const HSThemeAppearance = {
      init() {
        const defaultTheme = "default";
        let theme = localStorage.getItem("hs_theme") || defaultTheme;

        if (document.querySelector("html").classList.contains("dark")) return;
        this.setAppearance(theme);
      },
      _resetStylesOnLoad() {
        const $resetStyles = document.createElement("style");
        $resetStyles.innerText = `*{transition: unset !important;}`;
        $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
        document.head.appendChild($resetStyles);
        return $resetStyles;
      },
      setAppearance(theme, saveInStore = true, dispatchEvent = true) {
        const $resetStylesEl = this._resetStylesOnLoad();

        if (saveInStore) {
          localStorage.setItem("hs_theme", theme);
        }

        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }

        document.querySelector("html").classList.remove("dark");
        document.querySelector("html").classList.remove("default");
        document.querySelector("html").classList.remove("auto");

        document
          .querySelector("html")
          .classList.add(this.getOriginalAppearance());

        setTimeout(() => {
          $resetStylesEl.remove();
        });

        if (dispatchEvent) {
          window.dispatchEvent(
            new CustomEvent("on-hs-appearance-change", { detail: theme }),
          );
        }
      },
      getAppearance() {
        let theme = this.getOriginalAppearance();
        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }
        return theme;
      },
      getOriginalAppearance() {
        const defaultTheme = "default";
        return localStorage.getItem("hs_theme") || defaultTheme;
      },
    };
    HSThemeAppearance.init();

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", () => {
        if (HSThemeAppearance.getOriginalAppearance() === "auto") {
          HSThemeAppearance.setAppearance("auto", false);
        }
      });

    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
